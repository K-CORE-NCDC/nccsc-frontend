{"version":3,"sources":["containers/Refresh.js"],"names":["Refresh","timeout","useState","remaining","setRemaining","elapsed","setElapsed","Date","setLastActive","isIdle","setIsIdle","useIdleTimer","onActive","onIdle","reset","pause","resume","getRemainingTime","getLastActiveTime","getElapsedTime","useEffect","setInterval","toString","onClick"],"mappings":"uMAIe,SAASA,IACtB,IAAMC,EAAU,IAChB,EAAkCC,mBAASD,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,oBAAU,IAAIK,MAAlD,mBAAmBC,GAAnB,WACA,EAA4BN,oBAAS,GAArC,mBAAOO,EAAP,KAAeC,EAAf,KAKA,EAOIC,YAAa,CACfV,UACAW,SAZqB,kBAAMF,GAAU,IAarCG,OAZmB,kBAAMH,GAAU,MAGnCI,EADF,EACEA,MACAC,EAFF,EAEEA,MACAC,EAHF,EAGEA,OACAC,EAJF,EAIEA,iBACAC,EALF,EAKEA,kBACAC,EANF,EAMEA,eA0BF,OAfAC,qBAAU,WACRhB,EAAaa,KACbT,EAAcU,KACdZ,EAAWa,KAEXE,aAAY,WACVjB,EAAaa,KACbT,EAAcU,KACdZ,EAAWa,OACV,OACF,IAEHC,qBAAU,cACR,CAACX,IAGD,gCACE,gCACE,2CAAcR,EAAd,QACA,kDAAqBE,KACrB,gDAAmBE,KAEnB,wCAAWI,EAAOa,iBAEpB,gCACE,wBAAQC,QA7BM,kBAAMT,KA6BpB,mBACA,wBAAQS,QA7BM,kBAAMR,KA6BpB,mBACA,wBAAQQ,QA7BO,kBAAMP,KA6BrB","file":"static/js/39.3245d7ed.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n// import { format } from 'date-fns'\nimport { useIdleTimer } from 'react-idle-timer'\n\nexport default function Refresh () {\n  const timeout = 3000\n  const [remaining, setRemaining] = useState(timeout)\n  const [elapsed, setElapsed] = useState(0)\n  const [lastActive, setLastActive] = useState(+new Date())\n  const [isIdle, setIsIdle] = useState(false)\n\n  const handleOnActive = () => setIsIdle(false)\n  const handleOnIdle = () => setIsIdle(true)\n\n  const {\n    reset,\n    pause,\n    resume,\n    getRemainingTime,\n    getLastActiveTime,\n    getElapsedTime\n  } = useIdleTimer({\n    timeout,\n    onActive: handleOnActive,\n    onIdle: handleOnIdle\n  })\n\n  const handleReset = () => reset()\n  const handlePause = () => pause()\n  const handleResume = () => resume()\n\n  useEffect(() => {\n    setRemaining(getRemainingTime())\n    setLastActive(getLastActiveTime())\n    setElapsed(getElapsedTime())\n\n    setInterval(() => {\n      setRemaining(getRemainingTime())\n      setLastActive(getLastActiveTime())\n      setElapsed(getElapsedTime())\n    }, 1000)\n  }, [])\n\n  useEffect(()=>{\n  },[isIdle])\n\n  return (\n    <div>\n      <div>\n        <h1>Timeout: {timeout}ms</h1>\n        <h1>Time Remaining: {remaining}</h1>\n        <h1>Time Elapsed: {elapsed}</h1>\n        {/* <h1>Last Active: {format(lastActive, 'MM-dd-yyyy HH:MM:ss.SSS')}</h1> */}\n        <h1>Idle: {isIdle.toString()}</h1>\n      </div>\n      <div>\n        <button onClick={handleReset}>RESET</button>\n        <button onClick={handlePause}>PAUSE</button>\n        <button onClick={handleResume}>RESUME</button>\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}