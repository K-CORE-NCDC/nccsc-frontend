{"version":3,"sources":["containers/UserDataVisualization/Components/TableDisplay/cellColorTable.js","containers/UserDataVisualization/Components/MainComponents/projectDataTable.js"],"names":["ExampleUserTable","tableData","className","map","name","scope","tableRows","index","cell","data","Math","random","dropdownOptions","clinical_information","rna","dna_mutation","dna_methylation","proteome","phospho","cnv","fusion","ProjectDataTable","dispatch","useDispatch","history","useHistory","fileDataAsTableAll","useSelector","dataVisualizationReducer","userDataProjectTable","useState","tableNavTabs","setTableNavTabs","fileDataAsTableRendered","setFileDataAsTableRendered","activeTableKey","setActiveTableKey","tableHeaders","setTableHeaders","show","setShow","params","useParams","useEffect","id","fetchProjectTableData","project_id","clearProjectTableDataTableData","length","allColumns","Object","keys","forEach","e","nameOfCol","replaceAll","push","toLocaleUpperCase","selector","row","currentRenderedTable","allTableTabs","tableNavTabsTemp","element","css","value","onClick","tableTabName","pagination","columns"],"mappings":"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","file":"static/js/27.b8bd4618.chunk.js","sourcesContent":["/* This example requires Tailwind CSS v2.0+ */\r\nimport React from 'react';\r\n\r\nexport default function ExampleUserTable({tableData}) {\r\n    // const tableData = data[\"files\"][\"table\"][\"dna_mutation\"]\r\n    return (\r\n        <>\r\n        {tableData && <div className=\"flex justify-center items-center \">\r\n            <div className=\"-my-2 overflow-scroll sm:-mx-6 lg:-mx-8\">\r\n                <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\r\n                    <div className=\"shadow overflow-scroll border-b border-gray-200 sm:rounded-lg\">\r\n                        <table className=\"min-w-full divide-y divide-gray-200\">\r\n                            <thead className=\"bg-gray-50\">\r\n                                <tr>\r\n                                    {tableData[\"headers\"].map(name => (\r\n                                        <th\r\n                                            key={name}\r\n                                            scope=\"col\"\r\n                                            className=\"px-6 py-3 text-center text-lg font-medium text-black uppercase tracking-wider\"\r\n                                        >\r\n                                            {name}\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                                {[...tableData[\"fault\"], ...tableData[\"normal\"]].map((tableRows, index) => (\r\n                                    <tr key={`${index}-${Math.random()}`}>\r\n                                        {tableRows.map(cell =>\r\n                                        (\r\n                                            cell[\"status\"] === true ? (\r\n                                                <td key={`${cell.data} ${Math.random()}`}>\r\n                                                    <div >\r\n                                                        <div className=\"ml-4\">\r\n                                                            <div className=\"text-center text-lg font-medium tracking-wider text-gray-900\">{cell.data}</div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                            ) : (\r\n                                                <td>\r\n                                                    <div>\r\n                                                        <div className=\"ml-4\">\r\n                                                            <div className=\"text-center text-lg bg-red-200 font-medium tracking-wider text-gray-900\">{cell.data}</div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                            )\r\n                                        )\r\n                                        )}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>}\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchProjectTableData, clearProjectTableDataTableData } from '../../../../actions/api_actions'\r\nimport ExampleUserTable from '../TableDisplay/cellColorTable'\r\nimport DataTable from 'react-data-table-component';\r\nimport { objectOf } from 'prop-types';\r\nimport { helpers } from 'chart.js';\r\n\r\nconst dropdownOptions = {\r\n    clinical_information: \"Clinical Information\",\r\n    rna: \"RNA\",\r\n    dna_mutation: \"DNA Mutation\",\r\n    dna_methylation: \"DNA Methylation\",\r\n    proteome: \"proteome\",\r\n    phospho: \"phospho\",\r\n    cnv: \"cnv\",\r\n    fusion: \"fusion\"\r\n}\r\nconst ProjectDataTable = () => {\r\n    const dispatch = useDispatch()\r\n    let history = useHistory();\r\n    const fileDataAsTableAll = useSelector((data) => data.dataVisualizationReducer.userDataProjectTable);\r\n    const [tableNavTabs, setTableNavTabs] = useState([])\r\n    const [fileDataAsTableRendered, setFileDataAsTableRendered] = useState({})\r\n    const [activeTableKey, setActiveTableKey] = useState(\"\")\r\n    // const [fileDataAsTableAll, setFileDataAsTableAll] = useState({})\r\n    const [tableHeaders, setTableHeaders] = useState([])\r\n    const [show, setShow] = useState(false)\r\n    const params = useParams()\r\n\r\n\r\n    const changeErrorDataTable = (tableTabName) => {\r\n        setShow(false)\r\n        setActiveTableKey(tableTabName)\r\n        setFileDataAsTableRendered(fileDataAsTableAll[tableTabName])\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (params && params.id) {\r\n            dispatch(fetchProjectTableData({ project_id: params.id }))\r\n        }\r\n    }, [params])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(clearProjectTableDataTableData())\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (fileDataAsTableRendered && fileDataAsTableRendered.length > 0) {\r\n            let allColumns = []\r\n            Object.keys(fileDataAsTableRendered[0]).forEach(e => {\r\n                let nameOfCol = e\r\n                nameOfCol = nameOfCol.replaceAll('_', ' ')\r\n                allColumns.push(\r\n                    {\r\n                        name: nameOfCol.toLocaleUpperCase(),\r\n                        selector: row => row[e]\r\n\r\n                    }\r\n                )\r\n            })\r\n            setTableHeaders(allColumns)\r\n            setShow(true)\r\n        }\r\n    }, [fileDataAsTableRendered])\r\n\r\n\r\n    useEffect(() => {\r\n        if (fileDataAsTableAll) {\r\n            setShow(false)\r\n            let currentRenderedTable = Object.keys(fileDataAsTableAll)\r\n            if (currentRenderedTable.length > 0) {\r\n                setFileDataAsTableRendered(fileDataAsTableAll[currentRenderedTable[0]])\r\n                setActiveTableKey(currentRenderedTable[0])\r\n            }\r\n        }\r\n    }, [fileDataAsTableAll])\r\n\r\n    useEffect(() => {\r\n        if (fileDataAsTableAll) {\r\n            let allTableTabs = Object.keys(fileDataAsTableAll)\r\n            let tableNavTabsTemp = []\r\n            allTableTabs.forEach(element => {\r\n                let css = \"px-4 py-2 font-semibold rounded-t opacity-50\"\r\n                if (activeTableKey === element) {\r\n                    css += \" border-blue-400 border-b-4 -mb-px opacity-100\"\r\n                }\r\n                tableNavTabsTemp.push(\r\n                    <li key={element} className={css}>\r\n                        <button value={element} onClick={() => changeErrorDataTable(element)} className=\"capitalize\" >{dropdownOptions[element]}</button>\r\n                    </li>\r\n                )\r\n            })\r\n            setTableNavTabs(tableNavTabsTemp)\r\n        }\r\n    }, [activeTableKey])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {show && <div className='p-1 col-span-3 gap-6'>\r\n                <div className=\"p-1 flex justify-around\">\r\n                    <button onClick={() => history.push('/userdata/')} className={`capitalize bg-main-blue hover:bg-main-blue mb-3 w-80 h-20 text-white ml-2 font-bold py-2 px-4 border border-blue-700 rounded `}\r\n                    >\r\n                        back\r\n                    </button>\r\n                    <button onClick={() => history.push(`/visualise/circos/${params.id}`)} className={`capitalize bg-main-blue hover:bg-main-blue mb-3 w-80 h-20 text-white ml-2 font-bold py-2 px-4 border border-blue-700 rounded `}\r\n                    >\r\n                        visualize\r\n                    </button>\r\n                </div>\r\n                <section>\r\n                    <nav className=\" px-8 pt-2 shadow-md\">\r\n                        <ul id=\"tabs\" className=\"inline-flex justify-center w-full px-1 pt-2 \" >\r\n                            {tableNavTabs}\r\n                        </ul>\r\n                    </nav>\r\n                </section>\r\n                <section >\r\n                    <div id=\"tab-contents\">\r\n                        <div>\r\n                            {/* <ExampleUserTable tableData={fileDataAsTableRendered} /> */}\r\n                            <DataTable pagination\r\n                                columns={tableHeaders}\r\n                                data={fileDataAsTableRendered}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProjectDataTable;"],"sourceRoot":""}