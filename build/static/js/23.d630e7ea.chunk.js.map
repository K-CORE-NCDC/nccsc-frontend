{"version":3,"sources":["containers/Common/Loader.js","containers/UserDataVisualization/Components/MainComponents/FileProjectDataTable.js"],"names":["LoaderComp","className","type","color","height","width","timeout","FileProjectDataTable","updateComponentNumber","dispatch","useDispatch","useState","rowData","setRowData","colData","setColData","tableNavTabs","setTableNavTabs","projectId","setProjectId","activeTableKey","setActiveTableKey","navTabIs","setNavTabIs","history","useHistory","verificationResponse","useSelector","data","homeReducer","uploadClinicalColumns","useEffect","available_step","length","temptabs","tabrow","tab","css","push","value","onClick","tabDropdownTable","Tablecolumns","rowdata","key","columns","rowObject","i","name","selector","row","v","String","split","sortable","tempRow","rawRowData","noOfRows","colname","projectResponse","id","defaultMessage","clear_new_file_upload_state","title","defaultSortField","pagination","conditionalRowStyles","when","toggleSelected","style","backgroundColor","userSelect"],"mappings":"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","file":"static/js/23.d630e7ea.chunk.js","sourcesContent":["import React from 'react'\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport default function LoaderComp() {\r\n  return (\r\n      <div className=\"flex justify-center mt-12\">\r\n        <div className=\"bg-white shadow-md rounded-full\">\r\n          <Loader\r\n            type=\"TailSpin\"\r\n            color=\"#0c3c6a\"\r\n            height={80}\r\n            width={80}\r\n            timeout={3000000} //3 secs\r\n          />\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport DataTable from \"react-data-table-component\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport LoaderCmp from \"../../../Common/Loader\";\nimport {\n  clear_new_file_upload_state\n} from \"../../../../actions/api_actions\";\nimport { FormattedMessage } from \"react-intl\";\n\nfunction FileProjectDataTable({ updateComponentNumber }) {\n  const dispatch = useDispatch();\n  const [rowData, setRowData] = useState([]);\n  const [colData, setColData] = useState([]);\n  const [tableNavTabs, setTableNavTabs] = useState([]);\n  const [projectId, setProjectId] = useState(0);\n  const [activeTableKey, setActiveTableKey] = useState(\"clinical_information\");\n  const [navTabIs, setNavTabIs] = useState('circos')\n  let history = useHistory();\n  const verificationResponse = useSelector(\n    (data) => data.homeReducer.uploadClinicalColumns\n  );\n\n  const tabDropdownTable = (tab) => {\n    setActiveTableKey(tab);\n  };\n\n  useEffect(()=>{\n    if (verificationResponse && verificationResponse[\"project_details\"]) {\n      \n      for(const available_step in verificationResponse[\"project_details\"][\"available_steps\"]){\n        if(verificationResponse[\"project_details\"][\"available_steps\"][available_step].length > 0){\n          setNavTabIs(available_step)\n        }\n      }\n    }\n  },[verificationResponse])\n  useEffect(() => {\n    if (verificationResponse && verificationResponse[\"result\"]) {\n      let temptabs = [];\n\n      for (const tabrow in verificationResponse[\"result\"]) {\n        let tab = verificationResponse[\"result\"][tabrow][0][\"tab\"];\n        let css = \"px-4 py-2 font-semibold rounded-t opacity-50\";\n        if (activeTableKey === tab) {\n          css += \" border-blue-400 border-b-4 -mb-px opacity-100\";\n        }\n        temptabs.push(\n          <li key={tab} className={css}>\n            <button\n              value={tab}\n              onClick={() => tabDropdownTable(tab)}\n              className=\"capitalize\"\n            >\n              {tab}\n            </button>\n          </li>\n        );\n      }\n      setTableNavTabs(temptabs);\n    }\n\n    let Tablecolumns = [];\n    let rowdata = [];\n    if (verificationResponse) {\n      for (const key in verificationResponse[\"result\"]) {\n        if (activeTableKey === verificationResponse[\"result\"][key][0][\"tab\"]) {\n          // setting the columns data\n          let columns = verificationResponse[\"result\"][key][0][\"columns\"];\n          let rowObject = {};\n          for (let i = 0; i < columns.length; i++) {\n            rowObject[columns[i]] = \"\";\n            Tablecolumns.push({\n              name: columns[i],\n              selector: (row) => {\n                let rdata = String(row[columns[i]]);\n                let v = rdata.split(\"||\");\n                if (v.length > 1) {\n                  return <div className=\"text-red-700\">{v[1]}</div>;\n                } else {\n                  return <div className=\"\">{String(row[columns[i]])}</div>;\n                }\n              },\n              sortable: true,\n            });\n          }\n\n          let tempRow = { ...rowObject };\n          setColData(Tablecolumns);\n          // setting the row data\n          let rawRowData = verificationResponse[\"result\"][key];\n          let noOfRows = rawRowData.length;\n          for (let i = 1; i < noOfRows; i++) {\n            if (rawRowData[i]) {\n              let row = rawRowData[i][i];\n              for (const colname in row) {\n                if (rowObject[colname] === \"\") {\n                  rowObject[colname] =\n                    row[colname][\"success\"] === \"True\"\n                      ? row[colname][\"value\"]\n                      : \"False||\" + row[colname][\"value\"];\n                }\n              }\n              rowdata.push(rowObject);\n              rowObject = { ...tempRow };\n            }\n          }\n          setRowData(rowdata);\n        }\n      }\n      let projectResponse = verificationResponse[\"project_details\"];\n      if (\"id\" in projectResponse) {\n        setProjectId(projectResponse[\"id\"]);\n      } else {\n        setProjectId(0);\n      }\n    }\n  }, [verificationResponse, activeTableKey]);\n\n  const conditionalRowStyles = [\n    {\n      when: (row) => row.toggleSelected,\n      style: {\n        backgroundColor: \"green\",\n        userSelect: \"none\",\n      },\n    },\n  ];\n  return (\n    <div>\n      <div className=\"p-1 flex justify-around\">\n        <button\n           className={`capitalize bg-main-blue hover:bg-main-blue mb-3 w-80 h-20 text-white ml-2 font-bold py-2 px-4 border border-blue-700 rounded `}\n          type=\"button\"\n          onClick={() => {\n            updateComponentNumber(1);\n          }}\n          >\n          <FormattedMessage id=\"Back\" defaultMessage=\"Back\" />\n        </button>\n        {projectId !== 0 && (\n          <button\n            onClick={() => {\n              dispatch(clear_new_file_upload_state())\n              history.push(`/visualise/${navTabIs}/${projectId}`)}}\n            className={`capitalize bg-main-blue hover:bg-main-blue mb-3 w-80 h-20 text-white ml-2 font-bold py-2 px-4 border border-blue-700 rounded `}\n          >\n            <FormattedMessage id=\"Visualize\" defaultMessage=\"Visualize\" />\n          </button>\n        )}\n      </div>\n      <nav className=\" px-8 pt-2 shadow-md\">\n        <ul id=\"tabs\" className=\"inline-flex justify-center w-full px-1 pt-2 \">\n          {tableNavTabs}\n        </ul>\n      </nav>\n      <div className=\"App\">\n        {verificationResponse  && (\n          <DataTable\n            title=\"\"\n            columns={colData}\n            data={rowData}\n            defaultSortField=\"title\"\n            pagination\n            // onRowClicked={handleRowClicked}\n            conditionalRowStyles={conditionalRowStyles}\n          />\n        )}\n\n        {!verificationResponse  && (\n          <LoaderCmp />\n        )}\n      </div>\n\n      {/* <div className=\"flex items-center justify-end p-6 border-t border-solid border-blueGray-200 rounded-b\">\n        <button\n          className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\"\n          type=\"button\"\n          onClick={() => {\n            updateComponentNumber(1);\n          }}\n        >\n          <FormattedMessage id=\"Back\" defaultMessage=\"Back\" />\n        </button>\n      </div> */}\n    </div>\n  );\n}\n\nexport default FileProjectDataTable;\n"],"sourceRoot":""}